# ring_world_1 = {
# 	entity = "construction_platform_entity"
# 	construction_entity = "construction_platform_entity"
# 	portrait = "GFX_megastructure_construction_background"
# 	place_entity_on_planet_plane = no
# 	entity_offset = { x = -7 y = -7 }
# 	build_time = 1800
# 	resources = {
# 		category = megastructures_ring_world
# 		cost = {
# 			alloys = 5000
# 			influence = 300
# 		}

# 		upkeep = {
# 			energy = 5
# 		}
# 	}

# 	prerequisites = { "tech_ring_world" }

# 	potential = {
# 		if = {
# 			limit = {
# 				has_global_flag = giga_game_started
# 			}
# 			NOT = { has_global_flag = vanilla_ringworld_disabled }
# 			is_giga_one_planet_origin = no
# 			OR = {
# 				check_variable = { which = giga_vanilla_ringworld_cap value = 0 }						# No Cap
# 				check_variable = { which = giga_current_vanilla_ringworld value < giga_vanilla_ringworld_cap }
# 			}
# 		}
# 		if = {
# 			limit = {
# 				is_ai = yes
# 				has_global_flag = ai_ringworld_construction_flag
# 			}
# 			count_owned_megastructure = {
# 				limit = {
# 					OR = {
# 						is_megastructure_type = ring_world_1
# 						is_megastructure_type = ring_world_2
# 						is_megastructure_type = ring_world_2_intermediate
# 						is_megastructure_type = ring_world_3_intermediate
# 						is_megastructure_type = ring_world_restored
# 						is_megastructure_type = ring_world_ruined
# 					}
# 				}
# 				count < ai_ringworld_construction_var
# 			}
# 		}
# 	}

# 	possible = {
# 		exists = starbase
# 		custom_tooltip = {
# 			fail_text = "requires_inside_border"
# 			is_inside_border = from
# 		}
# 		custom_tooltip = {
# 			fail_text = "requires_surveyed_system"
# 			NOT = {
# 				any_system_planet = {
# 					is_surveyed = {
# 						who = prev.from
# 						status = no
# 					}
# 				}
# 			}
# 		}
# 		custom_tooltip = {
# 			fail_text = "requires_no_habitable_planets"
# 			NOT = {
# 				any_system_planet = {
# 					colonizable_planet = yes
# 				}
# 			}
# 		}
# 		custom_tooltip = {
# 			fail_text = "requires_no_black_hole"
# 			NOT = { is_star_class = sc_black_hole }
# 		}
# 		custom_tooltip = {
# 			fail_text = "requires_no_binary_trinary"
# 			NOR = {
# 				is_star_class = sc_binary_1
# 				is_star_class = sc_binary_2
# 				is_star_class = sc_binary_3
# 				is_star_class = sc_binary_4
# 				is_star_class = sc_binary_5
# 				is_star_class = sc_binary_6
# 				is_star_class = sc_binary_7
# 				is_star_class = sc_binary_8
# 				is_star_class = sc_binary_9
# 				is_star_class = sc_binary_10
# 				is_star_class = sc_trinary_1
# 				is_star_class = sc_trinary_2
# 				is_star_class = sc_trinary_3
# 				is_star_class = sc_trinary_4
# 			}
# 		}

# 		custom_tooltip = {
# 			fail_text = "requires_no_existing_megastructure"
# 			#NOT = { has_any_megastructure = yes }
# 			has_no_non_gate_megastructure = yes
# 		}

# 		if = {
# 			limit = {
# 				has_global_flag = giga_game_started
# 			}
# 			custom_tooltip = {
# 				fail_text = "requires_no_crisis_system"
# 				NOT = {
# 					any_system_planet = {
# 						has_planet_flag = crisis_vital_planet
# 					}
# 				}
# 			}
# 			custom_tooltip = {
# 				fail_text = "requires_not_capped"
# 				from = {
# 					OR = {
# 						check_variable = { which = giga_vanilla_ringworld_cap value = 0 }						# No Cap
# 						check_variable = { which = giga_current_vanilla_ringworld value < giga_vanilla_ringworld_cap }
# 					}
# 				}
# 			}
# 		}
# 	}

# 	placement_rules = {
# 		planet_possible = {
# 			custom_tooltip = {
# 				fail_text = "must_build_around_star"
# 				is_star = yes
# 			}
# 			custom_tooltip = {
# 				fail_text = "requires_no_anomaly"
# 				NOT = { has_anomaly = yes }
# 			}
# 			custom_tooltip = {
# 				fail_text = "requires_planets_for_material"
# 				hidden:solar_system = { any_system_planet = { NOT = { is_star = yes } } }
# 			}
# 			if = {
# 				limit = {
# 					has_global_flag = giga_game_started
# 				}
# 				custom_tooltip = {
# 					fail_text = "requires_standard_planet_class"
# 					giga_is_standard_star = yes
# 				}
# 			}
# 		}
# 	}

# 	ai_weight = {
# 		factor = 10

# 		modifier = {
# 			factor = 0.1
# 			starbase = { NOT = { has_starbase_size >= starbase_starfortress } }
# 		}

# 		modifier = {
# 			factor = 0.1
# 			any_neighbor_system = {
# 				exists = owner
# 				NOT = {
# 					owner = { is_same_value = from }
# 				}
# 			}
# 		}

# 		# modifier = {
# 		# 	has_global_flag = giga_game_started

# 		# 	weight = value:giga_ai_base_mega
# 		# 	mult = value:giga_ai_unlocks_gigastructures
# 		# 	mult = value:giga_ai_overpopulation_boost
# 		# 	mult = value:giga_ai_core_territory
# 		# 	mult = value:giga_ai_pacifist_plus
# 		# }
# 	}

# 	on_build_start = {}
# 	on_build_cancel = {}
# 	on_build_complete = {
# 		set_star_flag = ring_world_built
# 		if = {
# 			limit = {
# 				has_global_flag = giga_game_started
# 			}
# 			set_variable = { which = ring_segments value = 0 }
# 			from = {
# 				set_timed_country_flag = { flag = has_recently_built_vanilla_ring years = 20 }
# 				set_country_flag = giga_started_ringworld
# 				change_variable = { which = giga_current_vanilla_ringworld value = 1 }
# 			}
# 			fromfrom.planet = {
# 				if = { limit = { exists = orbital_station } orbital_station = { dismantle = yes } }
# 				giga_set_has_mega_flag = yes
# 			}
# 		}
# 	}
# }